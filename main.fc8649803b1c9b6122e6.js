(()=>{"use strict";var e={d:(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};function t(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}e.d({},{hi:()=>ue,MV:()=>ie,lH:()=>ee,xS:()=>G});var n=function(){function e(t){var n=t.renderer,r=t.containerSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._container=document.querySelector(r),this._renderer=n}var n,r;return n=e,(r=[{key:"renderItems",value:function(e){var t=this;e.forEach((function(e){return t._renderer(e)}))}},{key:"addItem",value:function(e){this._container.prepend(e)}}])&&t(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),e}();function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=function(){function e(t){var n,r,o=this,i=t.popupSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r=function(e){"Escape"===e.code&&o.close()},(n="_handleEscClose")in this?Object.defineProperty(this,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[n]=r,this._popup=document.querySelector(i)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("mousedown",(function(t){(t.target.classList.contains("popup_opened")||t.target.classList.contains("popup__close-button"))&&e.close()}))}}])&&r(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(){return a="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=c(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},a.apply(this,arguments)}function c(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=f(e)););return e}function s(e,t){return s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},s(e,t)}function l(e,t){if(t&&("object"===i(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function f(e){return f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},f(e)}var p=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&s(e,t)}(c,e);var t,n,r,o,i=(r=c,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=f(r);if(o){var n=f(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return l(this,e)});function c(e){var t,n=e.popupSelector,r=e.popupImageSelector,o=e.imageTitleSelector;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),(t=i.call(this,{popupSelector:n}))._popupPicture=t._popup.querySelector(r),t._pictureTitle=t._popup.querySelector(o),t}return t=c,(n=[{key:"open",value:function(e,t){a(f(c.prototype),"open",this).call(this),this._pictureTitle.textContent=e,this._popupPicture.src=t,this._popupPicture.alt=e}}])&&u(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),c}(o);function d(e){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},d(e)}function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function y(){return y="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=_(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},y.apply(this,arguments)}function _(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=k(e)););return e}function b(e,t){return b=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},b(e,t)}function m(e,t){if(t&&("object"===d(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return v(e)}function v(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function k(e){return k=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},k(e)}var S=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&b(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=k(r);if(o){var n=k(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return m(this,e)});function u(e){var t,n,r,o,a=e.popupSelector,c=e.selectorsConfig,s=e.formSubmitHandler;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),o=function(){return t._userInputData={},t._inputFields.forEach((function(e){t._userInputData[e.name]=e.value})),t._userInputData},(r="_getInputValues")in(n=v(t=i.call(this,{popupSelector:a})))?Object.defineProperty(n,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[r]=o,t._submitHandler=s,t._form=t._popup.querySelector(c.formSelector),t._submitButton=t._popup.querySelector(c.submitButtonSelector),t._inputFields=Array.from(t._popup.querySelectorAll(c.inputSelector)),t}return t=u,(n=[{key:"open",value:function(){y(k(u.prototype),"open",this).call(this)}},{key:"close",value:function(){y(k(u.prototype),"close",this).call(this),this._form.reset()}},{key:"setEventListeners",value:function(){var e=this;y(k(u.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(){var t=e._submitButton.textContent;e._submitButton.textContent="Сохранение...",e._submitHandler(e._getInputValues()).then((function(){return e.close()})).finally((function(){return e._submitButton.textContent=t}))}))}}])&&h(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(o);function g(e){return g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},g(e)}function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function C(){return C="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=O(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},C.apply(this,arguments)}function O(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=I(e)););return e}function E(e,t){return E=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},E(e,t)}function L(e,t){if(t&&("object"===g(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function I(e){return I=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},I(e)}var P=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&E(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=I(r);if(o){var n=I(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return L(this,e)});function u(e){var t,n=e.popupSelector;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,{popupSelector:n}))._confirmationButton=t._popup.querySelector(".popup__confirm-button"),t}return t=u,(n=[{key:"disableConfirmButton",value:function(){this._confirmationButton.setAttribute("disabled",!0)}},{key:"showDeletionProgress",value:function(){this._confirmationButton.textContent="Удаление..."}},{key:"_showDefaultButtonText",value:function(){this._confirmationButton.textContent="Да"}},{key:"open",value:function(){C(I(u.prototype),"open",this).call(this),this._showDefaultButtonText(),this._confirmationButton.removeAttribute("disabled")}},{key:"setConfirmationHandler",value:function(e){this._confirmationHandler=e}},{key:"setEventListeners",value:function(){var e=this;C(I(u.prototype),"setEventListeners",this).call(this),this._confirmationButton.addEventListener("click",(function(){return e._confirmationHandler()}))}}])&&w(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(o);function j(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var B=function(){function e(t){var n=t.userNameSelector,r=t.userAboutSelector,o=t.userAvatarSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._userName=document.querySelector(n),this._userAbout=document.querySelector(r),this._userAvatar=document.querySelector(o)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return this._currentUserData={userName:this._userName.textContent,userAbout:this._userAbout.textContent},this._currentUserData}},{key:"setUserAvatar",value:function(e){this._userAvatar.style.backgroundImage="url(".concat(e,")")}},{key:"setUserInfo",value:function(e){this._userName.textContent=e.name,this._userAbout.textContent=e.about,this._userAvatar.alt=e.name}}])&&j(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function A(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var R=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=t.baseUrl,this._headers=t.headers}var t,n;return t=e,(n=[{key:"_checkResponse",value:function(e){return e.ok?e.json():Promise.reject("Произошла ошибка, код ".concat(e.status))}},{key:"getUserInfo",value:function(){var e=this;return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then((function(t){return e._checkResponse(t)}))}},{key:"updateUserInfo",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.main,about:e.secondary})}).then((function(e){return t._checkResponse(e)}))}},{key:"updateUserAvatar",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((function(e){return t._checkResponse(e)}))}},{key:"getUploadedCards",value:function(){var e=this;return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then((function(t){return e._checkResponse(t)})).then((function(e){return e.reverse()}))}},{key:"uploadNewCard",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e.main,link:e.secondary})}).then((function(e){return t._checkResponse(e)}))}},{key:"deleteCard",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then((function(e){return t._checkResponse(e)}))}},{key:"likeCard",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"/cards/").concat(e,"/likes"),{method:"PUT",headers:this._headers}).then((function(e){return t._checkResponse(e)}))}},{key:"unlikeCard",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"/cards/").concat(e,"/likes"),{method:"DELETE",headers:this._headers}).then((function(e){return t._checkResponse(e)}))}}])&&A(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),T=document.querySelector(".profile"),q=document.querySelector(".edit-form_type_profile-edit"),U=document.querySelector(".loading-popup"),x=document.querySelector(".profile__avatar"),H=T.querySelector(".profile__edit-button"),D=T.querySelector(".profile__add-button"),N=q.querySelector(".edit-form__input_type_name"),V=q.querySelector(".edit-form__input_type_about"),F={},J={formSelector:".edit-form",inputSelector:".edit-form__input",submitButtonSelector:".edit-form__submit-button",disabledSubmitButtonClass:"edit-form__submit-button_disabled",inputErrorClass:"edit-form__input_type_error"};function M(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var z=function(){function e(t){var n=t.selectorsConfig,r=t.formElement;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._form=r,this._disabledSubmitButtonClass=n.disabledSubmitButtonClass,this._inputFieldErrorClass=n.inputErrorClass,this._submitButton=this._form.querySelector(n.submitButtonSelector),this._inputFields=Array.from(this._form.querySelectorAll(n.inputSelector))}var t,n;return t=e,(n=[{key:"enableValidation",value:function(){this._form.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners()}},{key:"resetValidation",value:function(){var e=this;this._toggleSubmitButtonState(),this._inputFields.forEach((function(t){e._hideInputIsInvalid(t)}))}},{key:"enableSubmitButton",value:function(){this._submitButton.removeAttribute("disabled"),this._submitButton.classList.remove(this._disabledSubmitButtonClass)}},{key:"disableSubmitButton",value:function(){this._submitButton.setAttribute("disabled",!0),this._submitButton.classList.add(this._disabledSubmitButtonClass)}},{key:"_setEventListeners",value:function(){var e=this;this._toggleSubmitButtonState(),this._inputFields.forEach((function(t){t.addEventListener("input",(function(){e._showInputValidityState(t),e._toggleSubmitButtonState()}))}))}},{key:"_toggleSubmitButtonState",value:function(){this._hasInvalidInput()?this.disableSubmitButton():this.enableSubmitButton()}},{key:"_showInputValidityState",value:function(e){e.validity.valid?this._hideInputIsInvalid(e):this._showInputIsInvalid(e,e.validationMessage)}},{key:"_showInputIsInvalid",value:function(e,t){var n=this._form.querySelector(".".concat(e.id,"-error"));e.classList.add(this._inputFieldErrorClass),n.textContent=t}},{key:"_hideInputIsInvalid",value:function(e){var t=this._form.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._inputFieldErrorClass),t.textContent=""}},{key:"_hasInvalidInput",value:function(){return this._inputFields.some((function(e){return!e.validity.valid}))}}])&&M(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function $(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var G,K=function(){function e(t){var n=t.cardData,r=t.cardSelector,o=t.userId,i=t.imageClickHandler,u=t.likeHandler,a=t.removeLikeHandler;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._cardElement=document.querySelector(r),this._cardName=n.name,this._cardPic=n.link,this._cardOwnerId=n.owner._id,this._cardLikes=n.likes,this._userId=o,this._imageClickHandler=i,this._likeHandler=u,this._removeLikeHandler=a,this.cardId=n._id}var t,n;return t=e,(n=[{key:"_getCardTemplate",value:function(){return this._cardElement.content.querySelector(".grid-elements__item").cloneNode(!0)}},{key:"_updateLikeCounterState",value:function(e,t){"0"!=e.textContent||t>=1?e.style.display="block":e.style.display="none"}},{key:"_checkIfCardIsLiked",value:function(e){var t=this;return e.some((function(e){if(e._id===t._userId)return!0}))}},{key:"_handleLikeButton",value:function(){var e=this;this._checkIfCardIsLiked(this._cardLikes)?this._removeLikeHandler().then((function(t){return e._cardLikes=t.likes,e._cardLikes})).then((function(t){e._cardLikeCounter.textContent=t.length,e._updateLikeCounterState(e._cardLikeCounter,t.length)})).then((function(){return e._likeButton.classList.remove("card__like-button_active")})).catch((function(e){return console.error(e)})):this._likeHandler().then((function(t){return e._cardLikes=t.likes,e._cardLikes})).then((function(t){e._cardLikeCounter.textContent=t.length,e._updateLikeCounterState(e._cardLikeCounter,t.length)})).then((function(){return e._likeButton.classList.add("card__like-button_active")})).catch((function(e){return console.error(e)}))}},{key:"_setEventListeners",value:function(){var e=this;this._likeButton.addEventListener("click",(function(){e._handleLikeButton()})),this._element.querySelector(".card__delete-button").addEventListener("click",(function(){e._openConfirmationPopup()})),this._cardImage.addEventListener("click",(function(){e._imageClickHandler(e._cardName,e._cardPic)}))}},{key:"removeCard",value:function(){this._element.remove(),this._element=null}},{key:"setTrashIconClickHandler",value:function(e){this._openConfirmationPopup=e}},{key:"createCard",value:function(){return this._element=this._getCardTemplate(),this._cardImage=this._element.querySelector(".card__photo"),this._likeButton=this._element.querySelector(".card__like-button"),this._deleteButton=this._element.querySelector(".card__delete-button"),this._cardLikeCounter=this._element.querySelector(".card__like-counter"),this._cardOwnerId===this._userId&&(this._deleteButton.style.display="block"),this._checkIfCardIsLiked(this._cardLikes)&&this._likeButton.classList.add("card__like-button_active"),this._setEventListeners(),this._element.querySelector(".card__name").textContent=this._cardName,this._cardImage.alt=this._cardName,this._cardImage.src=this._cardPic,this._cardLikeCounter.textContent=this._cardLikes.length,this._updateLikeCounterState(this._cardLikeCounter),this._element}}])&&$(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function Q(e,t){ee.open(e,t)}function W(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function X(e){var t=function(e){var t=new K({cardData:e,cardSelector:".cards-template",userId:G,imageClickHandler:Q,likeHandler:function(){return ue.likeCard(e._id).catch((function(e){return console.error(e)}))},removeLikeHandler:function(){return ue.unlikeCard(e._id).catch((function(e){return console.error(e)}))}});return t.setTrashIconClickHandler((function(){!function(e){ie.open(),ie.setConfirmationHandler((function(){ie.disableConfirmButton(),ie.showDeletionProgress(),ue.deleteCard(e.cardId).then((function(){e.removeCard()})).then((function(){return ie.close()})).catch((function(e){return console.error(e)}))}))}(t)})),t.createCard()}(e);Z.addItem(t)}var Y,Z=new n({renderer:function(e){X(e)},containerSelector:".grid-elements"}),ee=new p({popupSelector:".popup_type_opened-card",popupImageSelector:".popup__photo",imageTitleSelector:".popup__image-title"}),te=new B({userNameSelector:".profile__name",userAboutSelector:".profile__about",userAvatarSelector:".profile__avatar"}),ne=new S({popupSelector:".popup_type_profile-avatar-update",selectorsConfig:J,formSubmitHandler:function(e){return ue.updateUserAvatar(e.secondary).then((function(e){te.setUserAvatar(e.avatar)})).catch((function(e){return console.error("Произошла ошибка: ".concat(e))}))}}),re=new S({popupSelector:".popup_type_profile-edit",selectorsConfig:J,formSubmitHandler:function(e){return ue.updateUserInfo(e).then((function(e){return te.setUserInfo(e)})).catch((function(e){return console.error("Произошла ошибка: ".concat(e))}))}}),oe=new S({popupSelector:".popup_type_add-card",selectorsConfig:J,formSubmitHandler:function(e){return ue.uploadNewCard(e).then((function(e){X(e)})).catch((function(e){return console.error("Произошла ошибка: ".concat(e))}))}}),ie=new P({popupSelector:".popup_type_delete-confirmation"}),ue=new R({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-44",headers:{authorization:"cf0c08f2-8f2d-418f-9eab-35c4104d8607","Content-Type":"application/json"}});Promise.all([ue.getUserInfo(),ue.getUploadedCards()]).then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],u=!0,a=!1;try{for(n=n.call(e);!(u=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);u=!0);}catch(e){a=!0,o=e}finally{try{u||null==n.return||n.return()}finally{if(a)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return W(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?W(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];te.setUserAvatar(o.avatar),te.setUserInfo(o),G=o._id,Z.renderItems(i),U.style.display="none"})).catch((function(e){return console.error("Произошла ошибка: ".concat(e))})),Y=J,Array.from(document.querySelectorAll(Y.formSelector)).forEach((function(e){var t=new z({selectorsConfig:Y,formElement:e}),n=e.getAttribute("name");F[n]=t,t.enableValidation()})),x.addEventListener("click",(function(){ne.open(),F["avatar-updating-form"].resetValidation()})),H.addEventListener("click",(function(){var e=te.getUserInfo(),t=e.userName,n=e.userAbout;N.value=t,V.value=n,F["info-editing-form"].resetValidation(),re.open()})),D.addEventListener("click",(function(){oe.open(),F["card-adding-form"].resetValidation()})),oe.setEventListeners(),ne.setEventListeners(),re.setEventListeners(),ee.setEventListeners(),ie.setEventListeners()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,